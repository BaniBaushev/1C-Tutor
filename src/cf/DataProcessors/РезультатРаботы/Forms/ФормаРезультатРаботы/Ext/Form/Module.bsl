

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Инициализация();
	ЗагрузитьНастройки();
	СоздатьЭлементыПоказатели();
	
	АдресНастроекПоказателей = ПоместитьВоВременноеХранилище(НастройкиПоказателей.Выгрузить(), УникальныйИдентификатор);
	
	РезультатФоновогоЗадания = ЗапуститьФоновоеЗаданиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура Инициализация()
	
	ДобавитьПоказатель("Прибыль", "СуммаПриход", "Прибыль", "Поступлеие", , "ЧДЦ=2; ЧН=-", "СКД_РН_БалансУченика", "Отчет.Прибыль", "Основной", "СуммаПриход");
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьПоказатель(
	Показатель, 
	Ресурс = "", 
	Представление = "", 
	ПредставлениеРесурса = "", 
	Остаток = Ложь, 
	Формат = "", 
	ИмяМакета = "", 
	ИмяОтчета = "", 
	КлючВарианта = "", 
	КолонкиОтчета = "", 
	Порядок = 0)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Показатель", Показатель);
	СтруктураПоиска.Вставить("Ресурс", Ресурс);
	Если НастройкиПоказателей.НайтиСтроки(СтруктураПоиска).Количество()>0 Тогда
		Возврат;
	КонецЕсли; 
	
	Стр = НастройкиПоказателей.Добавить();
	Стр.Показатель = Показатель;
	Стр.Ресурс = Ресурс;
	Стр.Представление = ?(ПустаяСтрока(Представление), Показатель, Представление);
	Стр.ПредставлениеРесурса = ?(ПустаяСтрока(ПредставлениеРесурса), Ресурс, ПредставлениеРесурса);
	Стр.Остаток = Остаток;
	Стр.Формат = Формат;
	Стр.ИмяМакета = ИмяМакета;
	Стр.ИмяОтчета = ИмяОтчета;
	Стр.КлючВарианта = КлючВарианта;
	Если ЗначениеЗаполнено(ИмяОтчета) И ЗначениеЗаполнено(КлючВарианта) Тогда
		Стр.Вариант = ИмяОтчета + "." + КлючВарианта;
	КонецЕсли; 
	Стр.КолонкиОтчета = КолонкиОтчета;
	Стр.Порядок = Порядок;
	
КонецПроцедуры

 &НаСервере
Процедура СоздатьЭлементыПоказатели()
	
	//Кэшируем картинки
	ПульсБизнесаПоказательЛевыйВерхнийУгол = БиблиотекаКартинок.Skype;
	ПульсБизнесаПоказательВерх = БиблиотекаКартинок.БизнесПроцесс;
	ПульсБизнесаПоказательПравыйВерхнийУгол = БиблиотекаКартинок.ВводНаОсновании;
	ПульсБизнесаПоказательЛево = БиблиотекаКартинок.Документ;
	ПульсБизнесаПоказательПраво = БиблиотекаКартинок.ЗнакСтоп;
	//ПульсБизнесаПоказательЛевыйНижнийУгол = БиблиотекаКартинок.ЗначокЩита;
	ПульсБизнесаПоказательНиз = БиблиотекаКартинок.Калькулятор;
	ПульсБизнесаПоказательПравыйНижнийУгол = БиблиотекаКартинок.ДиалогВопрос;
	
	ЭтоМобильныйКлиент = ОбщегоНазначения.ЭтоМобильныйКлиент();
	
	Для каждого Стр Из ДобавленныеПоказатели Цикл
		
		Если ПустаяСтрока(Стр.Ресурс) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Стр.ИмяГруппы) Тогда
			
			Стр.ИмяГруппы = "Показатель"+СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			
			//Если Стр.Остаток Тогда
			//	
			//	Если Элементы.ГруппаПоказателиОстаткиЛево.ПодчиненныеЭлементы.Количество() <= Элементы.ГруппаПоказателиОстаткиПраво.ПодчиненныеЭлементы.Количество() Тогда
			//		РодительскаяГруппа = Элементы.ГруппаПоказателиОстаткиЛево;
			//	Иначе
			//		РодительскаяГруппа = Элементы.ГруппаПоказателиОстаткиПраво;
			//	КонецЕсли;
			//	
			//	Если ЭтоМобильныйКлиент Тогда
			//		РодительскаяГруппа = Элементы.ГруппаПоказателиОстаткиЛево;
			//	КонецЕсли;
			//	
			//Иначе
				
				//Если Элементы.ГруппаПоказателиОборотыЛево.ПодчиненныеЭлементы.Количество() <= Элементы.ГруппаПоказателиОборотыПраво.ПодчиненныеЭлементы.Количество() Тогда
				//	РодительскаяГруппа = Элементы.ГруппаПоказателиОборотыЛево;
				//Иначе
				//	РодительскаяГруппа = Элементы.ГруппаПоказателиОборотыПраво;
				//КонецЕсли;
				//
				//Если ЭтоМобильныйКлиент Тогда
					РодительскаяГруппа = Элементы.ГруппаПоказатели;
				//КонецЕсли;
				
			//КонецЕсли;
			
			Группа = Элементы.Добавить(Стр.ИмяГруппы, Тип("ГруппаФормы"), РодительскаяГруппа);
			
			// Верхняя группа
			Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			Группа.ОтображатьЗаголовок = Ложь;
			Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
			Группа.РастягиватьПоВертикали = Ложь;
			Группа.РастягиватьПоГоризонтали = Истина;
			Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			Группа.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			Группа.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			Группа.Высота = 3;
			
			// Декорация сверху
			ГруппаВерх = Элементы.Добавить(Стр.ИмяГруппы + "_Верх", Тип("ГруппаФормы"), Группа);
			ГруппаВерх.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаВерх.ОтображатьЗаголовок = Ложь;
			ГруппаВерх.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаВерх.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаВерх.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ЭлементДекорацияЛевыйВерхнийУгол = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияЛевыйВерхнийУгол", Тип("ДекорацияФормы"), ГруппаВерх);
			ЭлементДекорацияЛевыйВерхнийУгол.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияЛевыйВерхнийУгол.Картинка = ПульсБизнесаПоказательЛевыйВерхнийУгол;
			
			ЭлементДекорацияВерх = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияВерх", Тип("ДекорацияФормы"), ГруппаВерх);
			ЭлементДекорацияВерх.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияВерх.Картинка = ПульсБизнесаПоказательВерх;
			ЭлементДекорацияВерх.РастягиватьПоГоризонтали = Истина;
			ЭлементДекорацияВерх.РазмерКартинки = РазмерКартинки.Растянуть;
			
			ЭлементДекорацияПравыйВерхнийУгол = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияПравыйВерхнийУгол", Тип("ДекорацияФормы"), ГруппаВерх);
			ЭлементДекорацияПравыйВерхнийУгол.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияПравыйВерхнийУгол.Картинка = ПульсБизнесаПоказательПравыйВерхнийУгол;
			
			ГруппаЦентр = Элементы.Добавить(Стр.ИмяГруппы + "_Центр", Тип("ГруппаФормы"), Группа);
			ГруппаЦентр.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЦентр.ОтображатьЗаголовок = Ложь;
			ГруппаЦентр.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаЦентр.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаЦентр.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			//ГруппаЦентр.Ширина = 26;
			
			// Декорация слева
			ЭлементДекорацияЛево = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияЛево", Тип("ДекорацияФормы"), ГруппаЦентр);
			ЭлементДекорацияЛево.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияЛево.Картинка = ПульсБизнесаПоказательЛево;
			ЭлементДекорацияЛево.РастягиватьПоВертикали = Истина;
			ЭлементДекорацияЛево.РазмерКартинки = РазмерКартинки.Растянуть;
			
			// Иконка
			ЭлементДекорацияИконка = Элементы.Добавить(Стр.ИмяГруппы + "_Иконка", Тип("ДекорацияФормы"), ГруппаЦентр);
			ЭлементДекорацияИконка.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияИконка.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			ЭлементДекорацияИконка.Картинка = ПолучитьИконкуПоказателя(Стр.Показатель, Стр.Цвет);
			ЭлементДекорацияИконка.Гиперссылка = Истина;
			ЭлементДекорацияИконка.УстановитьДействие("Нажатие", "Подключаемый_ПоказательЗначениеНажатие");
			
			// Содержимое показателя
			ГруппаСодержимое = Элементы.Добавить(Стр.ИмяГруппы + "_Содержимое", Тип("ГруппаФормы"), ГруппаЦентр);
			ГруппаСодержимое.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСодержимое.ОтображатьЗаголовок = Ложь;
			ГруппаСодержимое.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСодержимое.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ГруппаСодержимое.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			ГруппаСодержимое.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
			ГруппаСодержимое.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
			
			ЭлементЗаголовок = Элементы.Добавить(Стр.ИмяГруппы+"_Заголовок", Тип("ДекорацияФормы"), ГруппаСодержимое);
			ЭлементЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
			ЭлементЗаголовок.РастягиватьПоГоризонтали = Истина;
			ЭлементЗаголовок.ПропускатьПриВводе = Ложь;
			ЭлементЗаголовок.Шрифт = Новый Шрифт("Arial", 10, Истина);
			
			ГруппаСумма = Элементы.Добавить(Стр.ИмяГруппы + "_ГруппаСумма", Тип("ГруппаФормы"), ГруппаСодержимое);
			ГруппаСумма.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСумма.ОтображатьЗаголовок = Ложь;
			ГруппаСумма.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСумма.РастягиватьПоГоризонтали = Истина;
			ГруппаСумма.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаСумма.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
			
			ИмяКоманды = Стр.ИмяГруппы + "_КонтекстРасшифроватьПоказатель";
			Команда = Команды.Найти(ИмяКоманды);
			Если Команда = Неопределено Тогда
				Команда = Команды.Добавить(ИмяКоманды);
				Команда.Действие = "КонтекстРасшифроватьПоказатель";
			КонецЕсли;
			
			ЭлементЗначение = Элементы.Добавить(Стр.ИмяГруппы+"_Значение", Тип("КнопкаФормы"), ГруппаСумма);
			ЭлементЗначение.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			ЭлементЗначение.ИмяКоманды = Команда.Имя;
			ЭлементЗначение.ПропускатьПриВводе = Ложь;
			
			Если НЕ ПустаяСтрока(Стр.Ресурс) Тогда
				ЭлементСравнение = Элементы.Добавить(Стр.ИмяГруппы+"_Сравнение", Тип("ДекорацияФормы"), ГруппаСумма);
				ЭлементСравнение.Вид = ВидДекорацииФормы.Картинка;
				ЭлементСравнение.РастягиватьПоГоризонтали = Ложь;
				ЭлементСравнение.РастягиватьПоВертикали = Ложь;
				ЭлементСравнение.Высота = 1;
				ЭлементСравнение.Ширина = 1;
				ЭлементСравнение.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
			Иначе
				ЭлементЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
				ЭлементЗаголовок.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
				ЭлементЗаголовок.Высота = ?(ДобавленныеПоказатели.Индекс(Стр)=0, 1, 2);
			КонецЕсли;
			
			// Декорация справа
			ЭлементДекорацияПраво = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияПраво", Тип("ДекорацияФормы"), ГруппаЦентр);
			ЭлементДекорацияПраво.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияПраво.Картинка = ПульсБизнесаПоказательПраво;
			ЭлементДекорацияПраво.РастягиватьПоВертикали = Истина;
			ЭлементДекорацияПраво.РазмерКартинки = РазмерКартинки.Растянуть;
			
			// Декорация снизу
			
			ГруппаНиз = Элементы.Добавить(Стр.ИмяГруппы + "_Низ", Тип("ГруппаФормы"), Группа);
			ГруппаНиз.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаНиз.ОтображатьЗаголовок = Ложь;
			ГруппаНиз.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаНиз.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаНиз.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
			
			ЭлементДекорацияЛевыйНижнийУгол = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияЛевыйНижнийУгол", Тип("ДекорацияФормы"), ГруппаНиз);
			ЭлементДекорацияЛевыйНижнийУгол.Вид = ВидДекорацииФормы.Картинка;
			//ЭлементДекорацияЛевыйНижнийУгол.Картинка = ПульсБизнесаПоказательЛевыйНижнийУгол;
			
			ЭлементДекорацияНиз = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияНиз", Тип("ДекорацияФормы"), ГруппаНиз);
			ЭлементДекорацияНиз.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияНиз.Картинка = ПульсБизнесаПоказательНиз;
			ЭлементДекорацияНиз.РастягиватьПоГоризонтали = Истина;
			ЭлементДекорацияНиз.РазмерКартинки = РазмерКартинки.Растянуть;
			
			ЭлементДекорацияПравыйНижнийУгол = Элементы.Добавить(Стр.ИмяГруппы + "_ДекорацияПравыйНижнийУгол", Тип("ДекорацияФормы"), ГруппаНиз);
			ЭлементДекорацияПравыйНижнийУгол.Вид = ВидДекорацииФормы.Картинка;
			ЭлементДекорацияПравыйНижнийУгол.Картинка = ПульсБизнесаПоказательПравыйНижнийУгол;
			
			// Контекстное меню
			//ДобавитьКоманду(Стр.ИмяГруппы, "_Настроить", ЭлементЗаголовок, "КонтекстНастроитьПоказатель", НСтр("ru = 'Настроить показатель'"), БиблиотекаКартинок.ПрочиеПользовательскиеНастройки);
			//Кнопка = ДобавитьКоманду(Стр.ИмяГруппы, "_Удалить", ЭлементЗаголовок, "КонтекстУдалитьПоказатель", НСтр("ru = 'Удалить показатель'"), БиблиотекаКартинок.СерыйКрест);
			//Если ПустаяСтрока(Стр.Ресурс) Тогда
			//	Кнопка.Заголовок = НСтр("ru = 'Удалить заголовок'");
			//КонецЕсли; 
			//ДобавитьКоманду(Стр.ИмяГруппы, "_Вверх", ЭлементЗаголовок, "КонтекстСместитьВверхПоказатель", НСтр("ru = 'Сместить вверх'"), БиблиотекаКартинок.СдвинутьВверх);
			//ДобавитьКоманду(Стр.ИмяГруппы, "_Вниз", ЭлементЗаголовок, "КонтекстСместитьВнизПоказатель", НСтр("ru = 'Сместить вниз'"), БиблиотекаКартинок.СдвинутьВниз);
			//
			//// Контекстное меню иконки
			//ДобавитьКоманду(Стр.ИмяГруппы, "_Настроить", ЭлементДекорацияИконка, "КонтекстНастроитьПоказатель", НСтр("ru = 'Настроить показатель'"), БиблиотекаКартинок.ПрочиеПользовательскиеНастройки);
			//Кнопка = ДобавитьКоманду(Стр.ИмяГруппы, "_Удалить", ЭлементДекорацияИконка, "КонтекстУдалитьПоказатель", НСтр("ru = 'Удалить показатель'"), БиблиотекаКартинок.СерыйКрест);
			//Если ПустаяСтрока(Стр.Ресурс) Тогда
			//	Кнопка.Заголовок = НСтр("ru = 'Удалить заголовок'");
			//КонецЕсли; 
			//ДобавитьКоманду(Стр.ИмяГруппы, "_Вверх", ЭлементДекорацияИконка, "КонтекстСместитьВверхПоказатель", НСтр("ru = 'Сместить вверх'"), БиблиотекаКартинок.СдвинутьВверх);
			//ДобавитьКоманду(Стр.ИмяГруппы, "_Вниз", ЭлементДекорацияИконка, "КонтекстСместитьВнизПоказатель", НСтр("ru = 'Сместить вниз'"), БиблиотекаКартинок.СдвинутьВниз);
			
		Иначе
			ЭлементЗаголовок = Элементы[Стр.ИмяГруппы+"_Заголовок"];
		КонецЕсли;
		Если ПустаяСтрока(Стр.Ресурс) Тогда
			ЭлементЗаголовок.Заголовок = Новый ФорматированнаяСтрока(ВРег(Стр.Представление), Новый Шрифт(Новый Шрифт(),,, Истина));
		Иначе
			ЭлементЗаголовок.Заголовок = ВРег(Стр.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПолучитьИконкуПоказателя(Показатель, Цвет)
	
	ИмяИконки = "ПульсБизнеса%1%2";
	Если ЗначениеЗаполнено(Цвет) Тогда
		ЦветИконки = Цвет;
	Иначе
		ЦветИконки = "Цвет1" // Не локализуется
	КонецЕсли;
	
	ИмяИконки = СтрШаблон(ИмяИконки, Показатель, ЦветИконки);
	Возврат БиблиотекаКартинок.Ресурс;
	
КонецФункции 

&НаСервере
Функция ЗапуститьФоновоеЗаданиеНаСервере(Секция = "", СохраняемыеПериоды = "")
	
	Если МонопольныйРежим() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СохраняемыеПериоды) Тогда
		СохранитьНастройкиПериоды(СохраняемыеПериоды);
	КонецЕсли; 
	
	Если ФоновоеЗаданиеЗапущено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	// Параметры обернем в структуру для их передачи через механизм ДлительныеОперации.
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Дата", Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня));
	ПараметрыПроцедуры.Вставить("ДатаСравнения", ДатаСравнения);
	ПараметрыПроцедуры.Вставить("Период", Период);
	ПараметрыПроцедуры.Вставить("ПериодСравнения", ПериодСравнения);
	ПараметрыПроцедуры.Вставить("Показатели", ДобавленныеПоказатели.Выгрузить());
	//ПараметрыПроцедуры.Вставить("Диаграммы", ДобавленныеДиаграммы.Выгрузить());
	Если НЕ ПустаяСтрока(Секция) Тогда
		ПараметрыПроцедуры.Вставить("Секция", Секция);
	КонецЕсли; 
	ПараметрыПроцедуры.Вставить("НеАнализироватьСебестоимость", Истина);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РезультатРаботы.ПолучитьДанные",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеАдресРезультата = РезультатФоновогоЗадания.АдресРезультата;
	ФоновоеЗаданиеИдентификатор   = РезультатФоновогоЗадания.ИдентификаторЗадания;
	
	// Если фоновое задание завершилось за время вызова, то данные уже получены
	Если РезультатФоновогоЗадания.Статус <> "Выполняется" Тогда
		ОбновитьДанные();
		Элементы.СтраницыДанныеОжидание.ТекущаяСтраница = Элементы.СтраницаДанные;
		Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ТекущийЭлемент = Элементы.ДекорацияОбновить;
		КонецЕсли; 
		//Элементы.ГруппаПоказателиОстатки.Доступность = Истина;
		//Элементы.ГруппаПоказателиОбороты.Доступность = Истина;
	Иначе
		// иначе начнем ожидания завершения фонового задания
		ФоновоеЗаданиеЗапущено = Истина;
		Если ПустаяСтрока(Секция) Тогда
			Элементы.СтраницыДанныеОжидание.ТекущаяСтраница = Элементы.СтраницаОжидание;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиПериоды(СохраняемыеПериоды)
	
	Имена = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СохраняемыеПериоды);
	Для каждого Имя Из Имена Цикл
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПульсБизнеса", Имя, ЭтаФорма[Имя]);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		Возврат;
	КонецЕсли; 
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
	
КонецПроцедуры   

&НаСервере
Процедура ОбновитьДанные()
	
	Если НЕ ЭтоАдресВременногоХранилища(ФоновоеЗаданиеАдресРезультата) Тогда
		Возврат;
	КонецЕсли; 
	
	Данные = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресРезультата);
	
	ОбновитьЗначенияПоказателей(Данные);
	//ОбновитьЗначенияДиаграмм(Данные);
	Если Данные.Свойство("Актуальность") Тогда
		Если Данные.Актуальность = Неопределено Тогда
			ПервыйНеактуальныйМесяц = '0001-01-01';
			ПерваяНеактуальнаяОрганизация = Справочники.Организации.ПустаяСсылка();
			Элементы.ГруппаАктуальностьСебестоимости.Видимость = Ложь;
		Иначе
			ПервыйНеактуальныйМесяц = Данные.Актуальность.Месяц;
			ПерваяНеактуальнаяОрганизация = Данные.Актуальность.Организация;
			Элементы.ГруппаАктуальностьСебестоимости.Видимость = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресРезультата);
	ФоновоеЗаданиеАдресРезультата = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗначенияПоказателей(Данные)
	
	Для каждого Стр Из ДобавленныеПоказатели Цикл
		//Если Данные.Свойство("Секция") И НЕ ПустаяСтрока(Данные.Секция)
		//	//И ((Данные.Секция = ИмяСекцииОстатки() И НЕ Стр.Остаток) 
		//	//ИЛИ (Данные.Секция = ИмяСекцииОбороты() И Стр.Остаток))
		//	Тогда
		//	Продолжить;
		//КонецЕсли; 
		Стр.Значение = 0;
		Стр.Изменение = 0;
		Стр.Подсказка = "";
	КонецЦикла;
	
	//Для каждого Стр Из ДобавленныеДиаграммы Цикл
	//	ОбъектДиаграмма = ЭтаФорма[Стр.ИмяРеквизита];
	//	ОбъектДиаграмма.Обновление = Ложь;
	//КонецЦикла;
	
	Для каждого Элемент Из Данные.Показатели Цикл
		СтруктураЗначения = Элемент.Значение;
		Если НЕ ЗначениеЗаполнено(СтруктураЗначения.Значение) И НЕ ЗначениеЗаполнено(СтруктураЗначения.ЗначениеСравнения) Тогда
			Продолжить;
		КонецЕсли; 
		Стр = ДобавленныеПоказатели[Элемент.Ключ];
		СтрокаНастроек = НастройкиПоказателей.НайтиПоИдентификатору(Стр.ИдентификаторСтрокиНастроек);
		Если ЗначениеЗаполнено(СтруктураЗначения.Значение) Тогда
			Стр.Значение = ОтформатироватьЗначение(СтруктураЗначения.Значение, Стр);
		КонецЕсли; 
		Если (ПериодСравнения <> Неопределено ) 
			ИЛИ (ДатаСравнения <> Неопределено) Тогда
			Если ТипЗнч(СтруктураЗначения.Значение) = Тип("Соответствие") Тогда
				Продолжить;
			КонецЕсли; 
			Если СтруктураЗначения.ЗначениеСравнения < СтруктураЗначения.Значение Тогда
				Стр.Изменение = 1;
			ИначеЕсли СтруктураЗначения.ЗначениеСравнения > СтруктураЗначения.Значение Тогда
				Стр.Изменение = 2;
			Иначе
				Стр.Изменение = 0;
			КонецЕсли;
			Если СтрокаНастроек.Остаток Тогда
				Стр.Подсказка = СтрШаблон(НСтр("ru = 'На %1: %2'"), 
					НРег(ПредставлениеСтандартнойДатыНачала(ДатаСравнения, Дата)), 
					ОтформатироватьЗначение(СтруктураЗначения.ЗначениеСравнения, Стр));
			Иначе
				Стр.Подсказка = СтрШаблон(НСтр("ru = 'За %1: %2'"), 
					НРег(ПредставлениеСтандартногоПериода(ПериодСравнения, Период)), 
					ОтформатироватьЗначение(СтруктураЗначения.ЗначениеСравнения, Стр));
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого Стр Из ДобавленныеПоказатели Цикл
		
		Если ПустаяСтрока(Стр.Ресурс) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементИконка = Элементы[СтрШаблон("%1_Иконка", Стр.ИмяГруппы)];
		ЭлементИконка.Картинка = ПолучитьИконкуПоказателя(Стр.Показатель, Стр.Цвет);
		
		Если НЕ ЗначениеЗаполнено(Стр.Значение) Тогда
			Стр.Значение = "0,00";
		КонецЕсли;
		
		ЭлементЗначение = Элементы[СтрШаблон("%1_Значение", Стр.ИмяГруппы)];
		ЭлементЗначение.Заголовок = Стр.Значение;
		
		//ЭлементСравнение = Элементы[СтрШаблон("%1_Сравнение", Стр.ИмяГруппы)];
		//Если Стр.Изменение = 0 Тогда
		//	ЭлементСравнение.Картинка = БиблиотекаКартинок.Пустая;
		//ИначеЕсли Стр.Изменение = 1 Тогда
		//	ЭлементСравнение.Картинка = БиблиотекаКартинок.ЗначениеУвеличилось;
		//ИначеЕсли Стр.Изменение = 2 Тогда
		//	ЭлементСравнение.Картинка = БиблиотекаКартинок.ЗначениеУменьшилось;
		//КонецЕсли;
		//ЭлементСравнение.Подсказка = Стр.Подсказка;
		
	КонецЦикла;
	
	//Для каждого Стр Из ДобавленныеДиаграммы Цикл
	//	ОбъектДиаграмма = ЭтаФорма[Стр.ИмяРеквизита];
	//	ОбъектДиаграмма.Обновление = Истина;
	//КонецЦикла;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтандартнойДатыНачала(Дата, ДатаСравнения = Неопределено)
	
	Если ТипЗнч(Дата)=Тип("Структура") Тогда
		ОбновитьДату(Дата, ДатаСравнения);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Возврат НСтр("ru = 'Не выбрана'");
	ИначеЕсли Дата.Вариант=ВариантСтандартнойДатыНачала.ПроизвольнаяДата Тогда
		Возврат Формат(Дата.Дата, "ДФ=dd.MM.yyyy");
	ИначеЕсли Дата.Вариант=ВариантСтандартнойДатыНачала.НачалоЭтогоДня Тогда
		Возврат НСтр("ru = 'Сегодня, на начало дня'");
	ИначеЕсли Дата.Вариант=ВариантСтандартнойДатыНачала.НачалоСледующегоДня Тогда
		Возврат НСтр("ru = 'Всегда актуально'");
	ИначеЕсли Дата.Вариант="ТакойЖеДеньНаПрошлойНеделе" Тогда
		Возврат НСтр("ru = 'Такой же день на прошлой неделе ('")+Формат(Дата.Дата, "ДФ='dd.MM.yyyy, ддд'")+")";
	ИначеЕсли Дата.Вариант="ТакойЖеДеньВПрошломМесяце" Тогда
		Возврат НСтр("ru = 'Такой же день прошлого месяца ('")+Формат(Дата.Дата, "ДФ='dd.MM.yyyy, ддд'")+")";
	ИначеЕсли Дата.Вариант="ТакойЖеДеньВПрошломГоду" Тогда
		Возврат НСтр("ru = 'Такой же день в прошлом году ('")+Формат(Дата.Дата, "ДФ='dd.MM.yyyy'")+")";
	Иначе
		Возврат Строка(Дата);
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСекцииОстатки()

	Возврат "Остатки";
	
КонецФункции 

&НаСервере
Функция ОтформатироватьЗначение(Значение, Стр)
	
	Если ТипЗнч(Значение)=Тип("ФорматированнаяСтрока") Тогда
		Возврат Значение;
	КонецЕсли; 
	Если ТипЗнч(Значение)=Тип("Строка") Тогда
		Возврат ВФорматированнуюСтроку(Значение);
	КонецЕсли; 
	СтрНастроек = НастройкиПоказателей.НайтиПоИдентификатору(Стр.ИдентификаторСтрокиНастроек);
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Если ПустаяСтрока(СтрНастроек.Формат) Тогда
			Результат = Строка(Значение);
		Иначе
			Результат = Формат(Значение, СтрНастроек.Формат);
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(СтрНастроек.Формат) Тогда
			Результат = ВФорматированнуюСтроку(Строка(Значение));
		Иначе
			Результат = ВФорматированнуюСтроку(Формат(Значение, СтрНастроек.Формат));
		КонецЕсли;
		Результат = Новый ФорматированнаяСтрока(
		Результат, 
		?(ЗначениеЗаполнено(Значение), Новый ФорматированнаяСтрока(" ", Новый Шрифт(Новый Шрифт,,8), ЦветаСтиля.ЦветТекстаФормы), ""));
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСтандартногоПериода(Период, ПериодОснование = Неопределено)
	
	Если ТипЗнч(Период)=Тип("Структура") Тогда
		ОбновитьДатыНачалаИКонцаПериода(Период, ПериодОснование);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат НСтр("ru = 'Не выбран'");
	ИначеЕсли Период.Вариант=ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) Тогда
			Возврат НСтр("ru = 'до '")+Формат(Период.ДатаОкончания, "ДЛФ=D");
		ИначеЕсли НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
			Возврат НСтр("ru = 'от '")+Формат(Период.ДатаНачала, "ДЛФ=D");
		Иначе
			Возврат ПредставлениеПериода(НачалоДня(Период.ДатаНачала), ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания));
		КонецЕсли; 
	ИначеЕсли Период.Вариант="ПредыдущийПлавающийПериод" Тогда
		Возврат НСтр("ru = 'Предыдущий период ('")+ПредставлениеПериода(НачалоДня(Период.ДатаНачала), КонецДня(Период.ДатаОкончания))+")";
	ИначеЕсли Период.Вариант="ЗаПрошлыйГод" Тогда
		Возврат НСтр("ru = 'За прошлый год ('")+ПредставлениеПериода(НачалоДня(Период.ДатаНачала), КонецДня(Период.ДатаОкончания))+")";
	ИначеЕсли Период.Вариант="Последние7ДнейНеСчитаяТекущего" Тогда
		Возврат НСтр("ru = 'Последние 7 дней, не считая текущего'");
	Иначе
		Возврат Строка(Период);
	КонецЕсли; 
	
КонецФункции 

&НаСервере
Функция ВФорматированнуюСтроку(Строка, Ссылка = "")
	
	РазделительДробнойЧасти = Сред(Формат(0.1), 2,1);
	Если СтрЧислоВхождений(Строка, РазделительДробнойЧасти)>1 Тогда
		Возврат Новый ФорматированнаяСтрока(Строка,,,, Ссылка);
	КонецЕсли; 
	Позиция = Найти(Строка, РазделительДробнойЧасти);
	Если Позиция=0 Тогда
		Возврат Новый ФорматированнаяСтрока(Строка, Новый Шрифт(,,,,,Ложь), ЦветаСтиля.ЦветТекстаФормы,, Ссылка);
	Иначе
		ТекстДо = Лев(Строка, Позиция-1);
		ТекстПосле = Сред(Строка, Позиция);
		Возврат Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(ТекстДо, Новый Шрифт(,,,,,Ложь), ЦветаСтиля.ЦветТекстаФормы,, Ссылка),
		Новый ФорматированнаяСтрока(ТекстПосле, Новый Шрифт(,,,,,Ложь), ЦветаСтиля.ЦветТекстаФормы,, Ссылка));
	КонецЕсли; 
	
КонецФункции  

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДату(СтандартнаяДата, ДатаСравнения = Неопределено)

	Если НЕ ТипЗнч(СтандартнаяДата)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	Если СтандартнаяДата.Вариант="ТакойЖеДеньНаПрошлойНеделе" Тогда
		СтандартнаяДата.Вставить("Дата", НачалоДня(ТекущаяДата())-86400*7);
	ИначеЕсли СтандартнаяДата.Вариант="ТакойЖеДеньВПрошломМесяце" Тогда
		СтандартнаяДата.Вставить("Дата", ДобавитьМесяц(НачалоДня(ТекущаяДата()), -1));
	ИначеЕсли СтандартнаяДата.Вариант="ТакойЖеДеньВПрошломГоду" Тогда
		СтандартнаяДата.Вставить("Дата", ДобавитьМесяц(НачалоДня(ТекущаяДата()), -12));
	КонецЕсли; 	
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДатыНачалаИКонцаПериода(СтандартныйПериод, ПериодОснование = Неопределено)

	Если НЕ ТипЗнч(СтандартныйПериод)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли; 
	Если СтандартныйПериод.Вариант="Последние7ДнейНеСчитаяТекущего" Тогда
		СтандартныйПериод.Вставить("ДатаНачала", НачалоДня(ТекущаяДата())-86400*7);
		СтандартныйПериод.Вставить("ДатаОкончания", НачалоДня(ТекущаяДата())-1);
	ИначеЕсли СтандартныйПериод.Вариант="ЗаПрошлыйГод" И ПериодОснование<>Неопределено Тогда
		Период = АналогичныйПериодПрошлогоГода(ПериодОснование);
		СтандартныйПериод.Вставить("ДатаНачала", Период.ДатаНачала);
		СтандартныйПериод.Вставить("ДатаОкончания", Период.ДатаОкончания);
	ИначеЕсли СтандартныйПериод.Вариант="ПредыдущийПлавающийПериод" И ПериодОснование<>Неопределено Тогда
		Период = ПредыдущийПлавающийПериод(ПериодОснование);
		СтандартныйПериод.Вставить("ДатаНачала", Период.ДатаНачала);
		СтандартныйПериод.Вставить("ДатаОкончания", Период.ДатаОкончания);
	КонецЕсли; 	
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция АналогичныйПериодПрошлогоГода(Период) 
	
	Если ТипЗнч(Период) = Тип("Структура") И Период.Вариант = "Последние7ДнейНеСчитаяТекущего" Тогда
		ДатаНачала = НачалоДня(ТекущаяДата()) - 7 * 86400;
		ДатаОкончания = НачалоДня(ТекущаяДата()) - 1;
	Иначе
		ДатаНачала = Период.ДатаНачала;
		ДатаОкончания = Период.ДатаОкончания;
	КонецЕсли;
	
	Год = Год(ДатаНачала);
	Месяц = Месяц(ДатаНачала);
	День = День(ДатаНачала);
	ЭтотГодВисокосный = (День(КонецМесяца(Дата(Год, 2, 1))) = 29);
	ПрошлыйГодВисокосный = (День(КонецМесяца(Дата(Год - 1, 2, 1))) = 29);
	Если Месяц = 2 И День = 29 И ЭтотГодВисокосный Тогда
		День = 28;
	ИначеЕсли Месяц = 2 И День = 28 И ПрошлыйГодВисокосный Тогда
		День = 29;
	КонецЕсли; 
	ГодКонца = Год(ДатаОкончания);
	МесяцКонца = Месяц(ДатаОкончания);
	ДеньКонца = День(ДатаОкончания);
	ЭтотГодВисокосный = (День(КонецМесяца(Дата(ГодКонца, 2, 1))) = 29);
	ПрошлыйГодВисокосный = (День(КонецМесяца(Дата(ГодКонца - 1, 2, 1))) = 29);
	Если МесяцКонца = 2 И ДеньКонца = 29 И ЭтотГодВисокосный Тогда
		ДеньКонца = 28;
	ИначеЕсли МесяцКонца = 2 И ДеньКонца = 28 И ПрошлыйГодВисокосный Тогда
		ДеньКонца = 29;
	КонецЕсли; 
	
	Если Период.Вариант = ВариантСтандартногоПериода.Сегодня Тогда
		Дата = Дата(Год - 1, Месяц, День);
		Возврат Новый СтандартныйПериод(НачалоДня(Дата), КонецДня(Дата));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели Тогда
		ПродолжительностьСекунд = НачалоДня(ДатаОкончания) - НачалоНедели(ДатаОкончания);
		Неделя = НеделяГода(ДатаНачала);
		ДеньНедели = ДеньНедели(Дата(Год - 1, 1, 1));
		НомерДня = 7 * (Неделя - 1) - ДеньНедели + 1;
		Дата = Дата(Год - 1, 1, 1) + НомерДня * 86400;
		Возврат Новый СтандартныйПериод(НачалоНедели(Дата), КонецДня(Дата + ПродолжительностьСекунд));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца Тогда
		Возврат Новый СтандартныйПериод(Дата(Год - 1, Месяц, 1), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала Тогда
		Дата = ДобавитьМесяц(Дата(Год - 1, 1, 1), Месяц - 1);
		Возврат Новый СтандартныйПериод(НачалоКвартала(Дата), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия Тогда
		Если Месяц < 7 Тогда
			Возврат Новый СтандартныйПериод(Дата(Год - 1, 1, 1), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
		Иначе
			Возврат Новый СтандартныйПериод(ДобавитьМесяц(Дата(Год - 1, 1, 1), 6), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
		КонецЕсли; 
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода Тогда
		Возврат Новый СтандартныйПериод(Дата(Год - 1, 1, 1), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	Иначе
		Возврат Новый СтандартныйПериод(Дата(Год - 1, Месяц, День), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	КонецЕсли; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредыдущийПлавающийПериод(Период) 
	
	Если ТипЗнч(Период) = Тип("Структура") И Период.Вариант = "Последние7ДнейНеСчитаяТекущего" Тогда
		ДатаНачала = НачалоДня(ТекущаяДата());
		Возврат Новый СтандартныйПериод(ДатаНачала - 14 * 86400, ДатаНачала - 7 * 86400 - 1); 
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.Сегодня Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.Вчера);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты);
	Иначе
		ПродолжительностьСекунд = (КонецДня(Период.ДатаОкончания) - Период.ДатаНачала + 1);
		Возврат Новый СтандартныйПериод(Период.ДатаНачала - ПродолжительностьСекунд, Период.ДатаНачала - 1); 
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройки()
	
	ТаблицаПоказателей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "Показатели");
	ТаблицаДиаграмм = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПульсБизнеса", "Диаграммы");
	
	Если ТаблицаПоказателей=Неопределено Тогда
		ПоказателиПоУмолчанию();
	Иначе
		ДобавленныеПоказатели.Очистить();
		Для каждого Стр Из ТаблицаПоказателей Цикл
			Если НЕ ПустаяСтрока(Стр.Ресурс) Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Показатель", Стр.Показатель);
				СтруктураОтбора.Вставить("Ресурс", Стр.Ресурс);
				Строки = НастройкиПоказателей.НайтиСтроки(СтруктураОтбора);
				Если Строки.Количество()=0 Тогда
					// Устаревший показатель
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			НоваяСтрока = ДобавленныеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			Если НЕ ПустаяСтрока(Стр.Ресурс) Тогда
				СтрНастроек = Строки[0];
				НоваяСтрока.ИдентификаторСтрокиНастроек = СтрНастроек.ПолучитьИдентификатор();
				НоваяСтрока.Остаток = СтрНастроек.Остаток; 
				НоваяСтрока.Налоги = Стр.Показатель = "Налоги";
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ПоказателиПоУмолчанию()
	
	Период = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
	ПериодСравнения = Новый СтандартныйПериод(ВариантСтандартногоПериода.Вчера);
	ДатаСравнения = Неопределено;
	ОбновитьПредставленияПериодов(ЭтаФорма);
	ОтобразитьПоказатель("Прибыль", "СуммаПриход", НСтр("ru = 'Прибыль'"));
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПоказатель(Показатель, Ресурс, Представление = "", Цвет = "")
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Показатель", Показатель);
	СтруктураОтбора.Вставить("Ресурс", Ресурс);
	Строки = НастройкиПоказателей.НайтиСтроки(СтруктураОтбора);
	Для каждого Стр Из Строки Цикл
		СтрДанных = ДобавленныеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДанных, Стр, "Показатель, Ресурс");
		СтрДанных.Представление = ?(ПустаяСтрока(Представление), Стр.ПредставлениеРесурса, Представление);
		СтрДанных.ИдентификаторСтрокиНастроек = Стр.ПолучитьИдентификатор();
		//СтрДанных.Остаток = Стр.Остаток;
		//СтрДанных.Налоги = (Стр.Показатель = "Налоги");
		Если НЕ ПустаяСтрока(Цвет) Тогда
			СтрДанных.Цвет = Цвет;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияПериодов(Форма)
	
	//// Видимость групп выбора параметров сравнения
	//ВидимостьДатыСравнения = (Форма.ДатаСравнения<>Неопределено);
	//Если Форма.Элементы.ГруппаПоказателиОстаткиДатаСравнения.Видимость<>ВидимостьДатыСравнения Тогда
	//	Форма.Элементы.ГруппаПоказателиОстаткиДатаСравнения.Видимость = ВидимостьДатыСравнения;
	//КонецЕсли; 
	//ВидимостьПериодаСравнения = (Форма.ПериодСравнения<>Неопределено);
	//Если Форма.Элементы.ГруппаПоказателиОборотыПериодСравнения.Видимость<>ВидимостьПериодаСравнения Тогда
	//	Форма.Элементы.ГруппаПоказателиОборотыПериодСравнения.Видимость = ВидимостьПериодаСравнения;
	//КонецЕсли;
	//
	//// Доступность кнопок смещения периода
	//ДоступностьКнопокПериод = МожноСместитьПериод(Форма.Период);
	//Если Форма.Элементы.ПериодНазад.Доступность<>ДоступностьКнопокПериод Тогда
	//	Форма.Элементы.ПериодНазад.Доступность = ДоступностьКнопокПериод;
	//	Форма.Элементы.ПериодВперед.Доступность = ДоступностьКнопокПериод;
	//КонецЕсли; 
	//ДоступностьКнопокПериодСравнения = МожноСместитьПериод(Форма.ПериодСравнения);
	//Если Форма.Элементы.ПериодСравненияНазад.Доступность<>ДоступностьКнопокПериодСравнения Тогда
	//	Форма.Элементы.ПериодСравненияНазад.Доступность = ДоступностьКнопокПериодСравнения;
	//	Форма.Элементы.ПериодСравненияВперед.Доступность = ДоступностьКнопокПериодСравнения;
	//КонецЕсли; 
	
	// Представления периодов
	//Форма.Элементы.ДатаВыбор.Заголовок = ВРег(НСтр("ru = 'На сегодня'"));
	//Форма.Элементы.ДатаВыбор.РасширеннаяПодсказка.Заголовок = Форма.Элементы.ДатаВыбор.Заголовок;
	//
	//Представление = ПредставлениеСтандартнойДатыНачала(Форма.ДатаСравнения, Форма.Дата);
	//Форма.Элементы.ДатаСравненияВыбор.Заголовок = НСтр("ru = 'Сравнить с: '")+Представление;
	//Форма.Элементы.ДатаСравненияВыбор.РасширеннаяПодсказка.Заголовок = Представление;
	//
	//Форма.Элементы.ПериодВыбор.Заголовок = ВРег(ПредставлениеСтандартногоПериода(Форма.Период));
	//Форма.Элементы.ПериодВыбор.РасширеннаяПодсказка.Заголовок = Форма.Элементы.ПериодВыбор.Заголовок;
	//
	//Представление = ПредставлениеСтандартногоПериода(Форма.ПериодСравнения, Форма.Период);
	//Форма.Элементы.ПериодСравненияВыбор.Заголовок = НСтр("ru = 'Сравнить с: '")+Представление;
	//Форма.Элементы.ПериодСравненияВыбор.РасширеннаяПодсказка.Заголовок = Представление;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МожноСместитьПериод(СтандартныйПериод)
	
	Если СтандартныйПериод=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтандартныйПериод.Вариант="" Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если СтандартныйПериод.Вариант=ВариантСтандартногоПериода.ПроизвольныйПериод 
		И (НЕ ЗначениеЗаполнено(СтандартныйПериод.ДатаНачала)
		ИЛИ НЕ ЗначениеЗаполнено(СтандартныйПериод.ДатаОкончания)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

&НаКлиенте
Процедура ДекорацияОбновитьНажатие(Элемент)
	ОбновитьДанные();
КонецПроцедуры
